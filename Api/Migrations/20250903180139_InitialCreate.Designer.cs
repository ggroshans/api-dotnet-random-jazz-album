// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    [Migration("20250903180139_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.11");

            modelBuilder.Entity("Api.Domain.Entities.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalArtists")
                        .HasColumnType("TEXT")
                        .HasColumnName("additional_artists");

                    b.Property<string>("AmazonMusicId")
                        .HasColumnType("TEXT")
                        .HasColumnName("amazon_music_id");

                    b.Property<string>("AppleMusicId")
                        .HasColumnType("TEXT")
                        .HasColumnName("apple_music_id");

                    b.Property<int?>("AverageEmotionalTone")
                        .HasColumnType("INTEGER")
                        .HasColumnName("average_emotional_tone");

                    b.Property<int?>("AverageEnergyLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("average_energy_level");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT")
                        .HasColumnName("description");

                    b.Property<Guid>("DiscoTransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("disco_transaction_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("image_url");

                    b.Property<bool?>("IsOriginalRelease")
                        .HasColumnType("INTEGER")
                        .HasColumnName("is_original_release");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT")
                        .HasColumnName("label");

                    b.Property<string>("PandoraId")
                        .HasColumnType("TEXT")
                        .HasColumnName("pandora_id");

                    b.Property<int?>("PopularityRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("popularity_rating");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("release_date");

                    b.Property<string>("ReleaseDatePrecision")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("release_date_precision");

                    b.Property<int?>("SortableDate")
                        .HasColumnType("INTEGER")
                        .HasColumnName("sortable_date");

                    b.Property<string>("SpotifyId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("spotify_id");

                    b.Property<int>("SpotifyPopularity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("spotify_popularity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("title");

                    b.Property<int?>("TotalTracks")
                        .HasColumnType("INTEGER")
                        .HasColumnName("total_tracks");

                    b.Property<string>("YoutubeId")
                        .HasColumnType("TEXT")
                        .HasColumnName("youtube_id");

                    b.HasKey("Id")
                        .HasName("pk_albums");

                    b.HasIndex("DiscoTransactionId")
                        .HasDatabaseName("ix_albums_disco_transaction_id");

                    b.ToTable("albums", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Entities.AlbumArtist", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("album_id");

                    b.Property<int>("ArtistId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("artist_id");

                    b.Property<Guid>("DiscoTransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("disco_transaction_id");

                    b.Property<int?>("OriginalAlbumOrder")
                        .HasColumnType("INTEGER")
                        .HasColumnName("original_album_order");

                    b.HasKey("AlbumId", "ArtistId")
                        .HasName("pk_album_artists");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("ix_album_artists_artist_id");

                    b.HasIndex("DiscoTransactionId")
                        .HasDatabaseName("ix_album_artists_disco_transaction_id");

                    b.ToTable("album_artists", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Entities.AlbumGenre", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("album_id");

                    b.Property<int>("GenreTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("genre_type_id");

                    b.Property<Guid>("DiscoTransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("disco_transaction_id");

                    b.HasKey("AlbumId", "GenreTypeId")
                        .HasName("pk_album_genres");

                    b.HasIndex("DiscoTransactionId")
                        .HasDatabaseName("ix_album_genres_disco_transaction_id");

                    b.HasIndex("GenreTypeId")
                        .HasDatabaseName("ix_album_genres_genre_type_id");

                    b.ToTable("album_genres", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Entities.AlbumJazzEra", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("album_id");

                    b.Property<int>("JazzEraTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("jazz_era_type_id");

                    b.HasKey("AlbumId", "JazzEraTypeId")
                        .HasName("pk_album_jazz_eras");

                    b.HasIndex("JazzEraTypeId")
                        .HasDatabaseName("ix_album_jazz_eras_jazz_era_type_id");

                    b.ToTable("album_jazz_eras", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Entities.AlbumMood", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("album_id");

                    b.Property<int>("MoodId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("mood_id");

                    b.Property<Guid>("DiscoTransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("disco_transaction_id");

                    b.HasKey("AlbumId", "MoodId")
                        .HasName("pk_album_moods");

                    b.HasIndex("DiscoTransactionId")
                        .HasDatabaseName("ix_album_moods_disco_transaction_id");

                    b.HasIndex("MoodId")
                        .HasDatabaseName("ix_album_moods_mood_id");

                    b.ToTable("album_moods", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Entities.AlbumSubgenre", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("album_id");

                    b.Property<int>("SubgenreId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("subgenre_id");

                    b.Property<Guid>("DiscoTransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("disco_transaction_id");

                    b.HasKey("AlbumId", "SubgenreId")
                        .HasName("pk_album_subgenres");

                    b.HasIndex("DiscoTransactionId")
                        .HasDatabaseName("ix_album_subgenres_disco_transaction_id");

                    b.HasIndex("SubgenreId")
                        .HasDatabaseName("ix_album_subgenres_subgenre_id");

                    b.ToTable("album_subgenres", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Entities.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AlbumCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("album_count");

                    b.Property<int?>("AverageAlbumPopularityRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("average_album_popularity_rating");

                    b.Property<int?>("AverageEmotionalTone")
                        .HasColumnType("INTEGER")
                        .HasColumnName("average_emotional_tone");

                    b.Property<int?>("AverageEnergyLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("average_energy_level");

                    b.Property<string>("Biography")
                        .HasColumnType("TEXT")
                        .HasColumnName("biography");

                    b.Property<string>("BirthYear")
                        .HasColumnType("TEXT")
                        .HasColumnName("birth_year");

                    b.Property<string>("DeathYear")
                        .HasColumnType("TEXT")
                        .HasColumnName("death_year");

                    b.Property<Guid>("DiscoTransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("disco_transaction_id");

                    b.Property<string>("Genres")
                        .HasColumnType("TEXT")
                        .HasColumnName("genres");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT")
                        .HasColumnName("image_url");

                    b.Property<string>("Influences")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("influences");

                    b.Property<string>("Instrument")
                        .HasColumnType("TEXT")
                        .HasColumnName("instrument");

                    b.Property<string>("MoodBreakdown")
                        .HasColumnType("TEXT")
                        .HasColumnName("mood_breakdown");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("PopularityRating")
                        .HasColumnType("INTEGER")
                        .HasColumnName("popularity_rating");

                    b.Property<string>("RelatedArtists")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("related_artists");

                    b.Property<string>("SpotifyId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("spotify_id");

                    b.Property<int>("SpotifyPopularity")
                        .HasColumnType("INTEGER")
                        .HasColumnName("spotify_popularity");

                    b.Property<string>("SubgenreBreakdown")
                        .HasColumnType("TEXT")
                        .HasColumnName("subgenre_breakdown");

                    b.Property<string>("YearsActive")
                        .HasColumnType("TEXT")
                        .HasColumnName("years_active");

                    b.HasKey("Id")
                        .HasName("pk_artists");

                    b.HasIndex("DiscoTransactionId")
                        .HasDatabaseName("ix_artists_disco_transaction_id");

                    b.ToTable("artists", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Entities.DiscoTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasColumnName("id");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("TEXT")
                        .HasColumnName("error_message");

                    b.Property<string>("RequestDetails")
                        .HasColumnType("TEXT")
                        .HasColumnName("request_details");

                    b.Property<int?>("ResponseStatusCode")
                        .HasColumnType("INTEGER")
                        .HasColumnName("response_status_code");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("TEXT")
                        .HasColumnName("time_stamp");

                    b.HasKey("Id")
                        .HasName("pk_disco_transactions");

                    b.ToTable("disco_transactions", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Entities.GenreType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_genre_types");

                    b.ToTable("genre_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Classical"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jazz"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Blues"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Funk"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Rock"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Pop"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Country"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Folk"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hip-Hop/Rap"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Electronic"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Reggae"
                        },
                        new
                        {
                            Id = 12,
                            Name = "R&B/Soul"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Metal"
                        },
                        new
                        {
                            Id = 14,
                            Name = "World Music"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Gospel"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Latin"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.JazzEraType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int?>("EndYear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("end_year");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<int?>("StartYear")
                        .HasColumnType("INTEGER")
                        .HasColumnName("start_year");

                    b.HasKey("Id")
                        .HasName("pk_jazz_era_types");

                    b.ToTable("jazz_era_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndYear = 1918,
                            Name = "Ragtime",
                            StartYear = 1897
                        },
                        new
                        {
                            Id = 2,
                            EndYear = 1929,
                            Name = "Early Jazz / New Orleans Jazz",
                            StartYear = 1910
                        },
                        new
                        {
                            Id = 3,
                            EndYear = 1942,
                            Name = "Kansas City Jazz",
                            StartYear = 1928
                        },
                        new
                        {
                            Id = 4,
                            EndYear = 1945,
                            Name = "Swing Era / Big Band Era",
                            StartYear = 1930
                        },
                        new
                        {
                            Id = 5,
                            EndYear = 1953,
                            Name = "Gypsy Jazz (Jazz Manouche)",
                            StartYear = 1934
                        },
                        new
                        {
                            Id = 6,
                            EndYear = 1955,
                            Name = "Bebop",
                            StartYear = 1945
                        },
                        new
                        {
                            Id = 7,
                            EndYear = 1959,
                            Name = "Cool Jazz",
                            StartYear = 1949
                        },
                        new
                        {
                            Id = 8,
                            EndYear = 1965,
                            Name = "Hard Bop",
                            StartYear = 1954
                        },
                        new
                        {
                            Id = 9,
                            EndYear = 1969,
                            Name = "Soul Jazz",
                            StartYear = 1958
                        },
                        new
                        {
                            Id = 10,
                            EndYear = 1967,
                            Name = "Modal Jazz",
                            StartYear = 1958
                        },
                        new
                        {
                            Id = 11,
                            EndYear = 1974,
                            Name = "Free Jazz / Avant-Garde",
                            StartYear = 1960
                        },
                        new
                        {
                            Id = 12,
                            EndYear = 1972,
                            Name = "Post-Bop",
                            StartYear = 1964
                        },
                        new
                        {
                            Id = 13,
                            EndYear = 1989,
                            Name = "Jazz Fusion",
                            StartYear = 1969
                        },
                        new
                        {
                            Id = 14,
                            EndYear = 1982,
                            Name = "Jazz-Funk",
                            StartYear = 1972
                        },
                        new
                        {
                            Id = 15,
                            Name = "Latin Jazz (Afro-Cuban & Brazilian)",
                            StartYear = 1947
                        },
                        new
                        {
                            Id = 16,
                            EndYear = 1999,
                            Name = "Neo-Bop",
                            StartYear = 1980
                        },
                        new
                        {
                            Id = 17,
                            EndYear = 1999,
                            Name = "Smooth Jazz",
                            StartYear = 1982
                        },
                        new
                        {
                            Id = 18,
                            EndYear = 1997,
                            Name = "Acid Jazz",
                            StartYear = 1987
                        },
                        new
                        {
                            Id = 19,
                            Name = "Contemporary Jazz / Modern Creative",
                            StartYear = 2000
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.Mood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<Guid>("DiscoTransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("disco_transaction_id");

                    b.Property<int>("EmotionalTone")
                        .HasColumnType("INTEGER")
                        .HasColumnName("emotional_tone");

                    b.Property<int>("EnergyLevel")
                        .HasColumnType("INTEGER")
                        .HasColumnName("energy_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_moods");

                    b.HasIndex("DiscoTransactionId")
                        .HasDatabaseName("ix_moods_disco_transaction_id");

                    b.ToTable("moods", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Entities.Subgenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<Guid>("DiscoTransactionId")
                        .HasColumnType("TEXT")
                        .HasColumnName("disco_transaction_id");

                    b.Property<int>("GenreTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("genre_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_subgenres");

                    b.HasIndex("DiscoTransactionId")
                        .HasDatabaseName("ix_subgenres_disco_transaction_id");

                    b.HasIndex("GenreTypeId")
                        .HasDatabaseName("ix_subgenres_genre_type_id");

                    b.ToTable("subgenres", (string)null);
                });

            modelBuilder.Entity("Api.Domain.Entities.Album", b =>
                {
                    b.HasOne("Api.Domain.Entities.DiscoTransaction", "DiscoTransaction")
                        .WithMany("Albums")
                        .HasForeignKey("DiscoTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_albums_disco_transaction_disco_transaction_id");

                    b.Navigation("DiscoTransaction");
                });

            modelBuilder.Entity("Api.Domain.Entities.AlbumArtist", b =>
                {
                    b.HasOne("Api.Domain.Entities.Album", "Album")
                        .WithMany("AlbumArtists")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_artists_albums_album_id");

                    b.HasOne("Api.Domain.Entities.Artist", "Artist")
                        .WithMany("AlbumArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_artists_artists_artist_id");

                    b.HasOne("Api.Domain.Entities.DiscoTransaction", "DiscoTransaction")
                        .WithMany("AlbumArtists")
                        .HasForeignKey("DiscoTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_artists_disco_transactions_disco_transaction_id");

                    b.Navigation("Album");

                    b.Navigation("Artist");

                    b.Navigation("DiscoTransaction");
                });

            modelBuilder.Entity("Api.Domain.Entities.AlbumGenre", b =>
                {
                    b.HasOne("Api.Domain.Entities.Album", "Album")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_genres_albums_album_id");

                    b.HasOne("Api.Domain.Entities.DiscoTransaction", "DiscoTransaction")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("DiscoTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_genres_disco_transactions_disco_transaction_id");

                    b.HasOne("Api.Domain.Entities.GenreType", "GenreType")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("GenreTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_genres_genre_types_genre_type_id");

                    b.Navigation("Album");

                    b.Navigation("DiscoTransaction");

                    b.Navigation("GenreType");
                });

            modelBuilder.Entity("Api.Domain.Entities.AlbumJazzEra", b =>
                {
                    b.HasOne("Api.Domain.Entities.Album", "Album")
                        .WithMany("AlbumJazzEras")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_jazz_eras_albums_album_id");

                    b.HasOne("Api.Domain.Entities.JazzEraType", "JazzEraType")
                        .WithMany("AlbumJazzEras")
                        .HasForeignKey("JazzEraTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_jazz_eras_jazz_era_types_jazz_era_type_id");

                    b.Navigation("Album");

                    b.Navigation("JazzEraType");
                });

            modelBuilder.Entity("Api.Domain.Entities.AlbumMood", b =>
                {
                    b.HasOne("Api.Domain.Entities.Album", "Album")
                        .WithMany("AlbumMoods")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_moods_albums_album_id");

                    b.HasOne("Api.Domain.Entities.DiscoTransaction", "DiscoTransaction")
                        .WithMany("AlbumMoods")
                        .HasForeignKey("DiscoTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_moods_disco_transactions_disco_transaction_id");

                    b.HasOne("Api.Domain.Entities.Mood", "Mood")
                        .WithMany("AlbumMoods")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_moods_moods_mood_id");

                    b.Navigation("Album");

                    b.Navigation("DiscoTransaction");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("Api.Domain.Entities.AlbumSubgenre", b =>
                {
                    b.HasOne("Api.Domain.Entities.Album", "Album")
                        .WithMany("AlbumSubgenres")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_subgenres_albums_album_id");

                    b.HasOne("Api.Domain.Entities.DiscoTransaction", "DiscoTransaction")
                        .WithMany("AlbumSubgenres")
                        .HasForeignKey("DiscoTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_subgenres_disco_transactions_disco_transaction_id");

                    b.HasOne("Api.Domain.Entities.Subgenre", "Subgenre")
                        .WithMany("AlbumSubgenres")
                        .HasForeignKey("SubgenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_subgenres_subgenres_subgenre_id");

                    b.Navigation("Album");

                    b.Navigation("DiscoTransaction");

                    b.Navigation("Subgenre");
                });

            modelBuilder.Entity("Api.Domain.Entities.Artist", b =>
                {
                    b.HasOne("Api.Domain.Entities.DiscoTransaction", "DiscoTransaction")
                        .WithMany("Artists")
                        .HasForeignKey("DiscoTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_artists_disco_transaction_disco_transaction_id");

                    b.Navigation("DiscoTransaction");
                });

            modelBuilder.Entity("Api.Domain.Entities.Mood", b =>
                {
                    b.HasOne("Api.Domain.Entities.DiscoTransaction", "DiscoTransaction")
                        .WithMany("Moods")
                        .HasForeignKey("DiscoTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moods_disco_transaction_disco_transaction_id");

                    b.Navigation("DiscoTransaction");
                });

            modelBuilder.Entity("Api.Domain.Entities.Subgenre", b =>
                {
                    b.HasOne("Api.Domain.Entities.DiscoTransaction", "DiscoTransaction")
                        .WithMany("Subgenres")
                        .HasForeignKey("DiscoTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subgenres_disco_transaction_disco_transaction_id");

                    b.HasOne("Api.Domain.Entities.GenreType", "GenreType")
                        .WithMany("Subgenres")
                        .HasForeignKey("GenreTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_subgenres_genre_types_genre_type_id");

                    b.Navigation("DiscoTransaction");

                    b.Navigation("GenreType");
                });

            modelBuilder.Entity("Api.Domain.Entities.Album", b =>
                {
                    b.Navigation("AlbumArtists");

                    b.Navigation("AlbumGenres");

                    b.Navigation("AlbumJazzEras");

                    b.Navigation("AlbumMoods");

                    b.Navigation("AlbumSubgenres");
                });

            modelBuilder.Entity("Api.Domain.Entities.Artist", b =>
                {
                    b.Navigation("AlbumArtists");
                });

            modelBuilder.Entity("Api.Domain.Entities.DiscoTransaction", b =>
                {
                    b.Navigation("AlbumArtists");

                    b.Navigation("AlbumGenres");

                    b.Navigation("AlbumMoods");

                    b.Navigation("AlbumSubgenres");

                    b.Navigation("Albums");

                    b.Navigation("Artists");

                    b.Navigation("Moods");

                    b.Navigation("Subgenres");
                });

            modelBuilder.Entity("Api.Domain.Entities.GenreType", b =>
                {
                    b.Navigation("AlbumGenres");

                    b.Navigation("Subgenres");
                });

            modelBuilder.Entity("Api.Domain.Entities.JazzEraType", b =>
                {
                    b.Navigation("AlbumJazzEras");
                });

            modelBuilder.Entity("Api.Domain.Entities.Mood", b =>
                {
                    b.Navigation("AlbumMoods");
                });

            modelBuilder.Entity("Api.Domain.Entities.Subgenre", b =>
                {
                    b.Navigation("AlbumSubgenres");
                });
#pragma warning restore 612, 618
        }
    }
}
