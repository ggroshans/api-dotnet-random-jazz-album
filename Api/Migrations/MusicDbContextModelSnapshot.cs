// <auto-generated />
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RandomAlbumApi.Data;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    partial class MusicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RandomAlbumApi.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AlbumTheme")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("PopularTracks")
                        .HasColumnType("text[]");

                    b.Property<string>("ReleaseDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpotifyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TotalTracks")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.AlbumArtist", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.HasKey("AlbumId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("AlbumArtists");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.AlbumGenre", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("AlbumId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("AlbumGenres");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.AlbumMood", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("MoodId")
                        .HasColumnType("integer");

                    b.HasKey("AlbumId", "MoodId");

                    b.HasIndex("MoodId");

                    b.ToTable("AlbumMoods");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.AlbumSubgenre", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("SubgenreId")
                        .HasColumnType("integer");

                    b.HasKey("AlbumId", "SubgenreId");

                    b.HasIndex("SubgenreId");

                    b.ToTable("AlbumSubgenres");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SpotifyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.Mood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Moods");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.Subgenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Subgenres");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.AlbumArtist", b =>
                {
                    b.HasOne("RandomAlbumApi.Models.Album", "Album")
                        .WithMany("AlbumArtists")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomAlbumApi.Models.Artist", "Artist")
                        .WithMany("AlbumArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.AlbumGenre", b =>
                {
                    b.HasOne("RandomAlbumApi.Models.Album", "Album")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomAlbumApi.Models.Genre", "Genre")
                        .WithMany("AlbumGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.AlbumMood", b =>
                {
                    b.HasOne("RandomAlbumApi.Models.Album", "Album")
                        .WithMany("AlbumMoods")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomAlbumApi.Models.Mood", "Mood")
                        .WithMany("AlbumMoods")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Mood");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.AlbumSubgenre", b =>
                {
                    b.HasOne("RandomAlbumApi.Models.Album", "Album")
                        .WithMany("AlbumSubgenres")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RandomAlbumApi.Models.Subgenre", "Subgenre")
                        .WithMany("AlbumSubgenres")
                        .HasForeignKey("SubgenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Subgenre");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.Subgenre", b =>
                {
                    b.HasOne("RandomAlbumApi.Models.Genre", "Genre")
                        .WithMany("Subgenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.Album", b =>
                {
                    b.Navigation("AlbumArtists");

                    b.Navigation("AlbumGenres");

                    b.Navigation("AlbumMoods");

                    b.Navigation("AlbumSubgenres");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.Artist", b =>
                {
                    b.Navigation("AlbumArtists");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.Genre", b =>
                {
                    b.Navigation("AlbumGenres");

                    b.Navigation("Subgenres");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.Mood", b =>
                {
                    b.Navigation("AlbumMoods");
                });

            modelBuilder.Entity("RandomAlbumApi.Models.Subgenre", b =>
                {
                    b.Navigation("AlbumSubgenres");
                });
#pragma warning restore 612, 618
        }
    }
}
